import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import torch
from torch.utils.data import Dataset, DataLoader
from torch.nn.utils.rnn import pad_sequence
from torch import nn
from torch.optim import Adam
from tensorflow.keras.preprocessing.text import Tokenizer
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.utils import to_categorical

# Load the modified dataset
data = pd.read_csv('malurl_final.csv')

# Drop rows with missing values (NaN) in the 'class' column
data = data.dropna(subset=['class'])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['url'], data['class'], test_size=0.2, random_state=42)

# Encode the target labels
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# Tokenize the URLs
max_words = 1000
tokenizer = Tokenizer(num_words=max_words, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)
X_train_sequences = tokenizer.texts_to_sequences(X_train)
X_test_sequences = tokenizer.texts_to_sequences(X_test)

# Pad the sequences
X_train_padded = pad_sequence([torch.LongTensor(seq) for seq in X_train_sequences], batch_first=True, padding_value=0)
X_test_padded = pad_sequence([torch.LongTensor(seq) for seq in X_test_sequences], batch_first=True, padding_value=0)

# Create a custom dataset
class URLDataset(Dataset):
    def __init__(self, X, y):
        self.X = X
        self.y = y

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

# Create a custom collate function to handle variable-length sequences
def collate_fn(batch):
    X = [item[0] for item in batch]
    y = [item[1] for item in batch]
    X_padded = pad_sequence([torch.LongTensor(seq) for seq in X], batch_first=True, padding_value=0)
    y_one_hot = torch.FloatTensor(np.eye(3)[y])
    return X_padded, y_one_hot

# Create a simple LSTM model
class URLClassifier(nn.Module):
    def __init__(self, max_words, embedding_dim, hidden_dim, num_classes):
        super().__init__()
        self.embedding = nn.Embedding(max_words, embedding_dim)
        self.lstm = nn.LSTM(embedding_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, num_classes)

    def forward(self, x):
        x = self.embedding(x)
        _, (h_n, _) = self.lstm(x)
        out = self.fc(h_n.squeeze(0))
        return out

# Initialize the model
model = URLClassifier(max_words, 128, 128, 3)

# Define the loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = Adam(model.parameters())

# Create data loaders
train_dataset = URLDataset(X_train_sequences, y_train_encoded)
test_dataset = URLDataset(X_test_sequences, y_test_encoded)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True, collate_fn=collate_fn)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False, collate_fn=collate_fn)

# Train the model
for epoch in range(5):
    for X_batch, y_batch in train_loader:
        optimizer.zero_grad()
        y_pred = model(X_batch)
        loss = criterion(y_pred, y_batch.argmax(dim=1))
        loss.backward()
        optimizer.step()

    # Evaluate the model
    with torch.no_grad():
        test_loss = 0
        test_acc = 0
        for X_batch, y_batch in test_loader:
            y_pred = model(X_batch)
            test_loss += criterion(y_pred, y_batch.argmax(dim=1)).item() * len(X_batch)
            test_acc += (y_pred.argmax(dim=1) == y_batch.argmax(dim=1)).sum().item()
        test_loss /= len(X_test)
        test_acc /= len(X_test)
        print(f"Epoch {epoch+1}: Test Loss: {test_loss:.4f}, Test Accuracy: {test_acc:.4f}")
